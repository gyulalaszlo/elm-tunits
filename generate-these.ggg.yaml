- inputs: &UNIFORM_TEMPLATES
    - templates/uniform-base.hb.elm
    - templates/uniform-imports.hb.elm
    - templates/uniform-record.hb.elm
    - templates/uniform-constructors.hb.elm
    - templates/uniform-axis.hb.elm
    - templates/uniform-trf.hb.elm
    - templates/uniform-semigroup.hb.elm
    - templates/uniform-monoid.hb.elm
    - templates/uniform-json.hb.elm

  outputs:
    "src/Units/Compose/N1.elm": &UNIFORM-N
      name: N1
      package: Units.Compose
#      axis: Dimension
      typeParams: [a]
      fields: {x: a}

      specialValues:

        - name: zero
          typeParams: [number]
          inputs: []
          formula: "uniform 0"

        - name: one
          typeParams: [number]
          inputs: []
          formula: "uniform 1"


      imports:
        - Lens exposing (Lens)

    "src/Units/Compose/N2.elm":
      <<: *UNIFORM-N
      name: N2
      fields: {x: a, y: a}
      imports:
        - Math.Vector2
        - Lens exposing (Lens)
      alternatives:
        - name: Vec2
          type: Math.Vector2.Vec2
          dimensionType: Float
          from: Math.Vector2.toRecord input
          to: Math.Vector2.fromRecord input

    "src/Units/Compose/N3.elm":
      <<: *UNIFORM-N
      name: N3
      fields: {x: a, y: a, z: a}
      imports:
        - Math.Vector3
        - Lens exposing (Lens)

      alternatives:
        - name: Vec3
          type: Math.Vector3.Vec3
          dimensionType: Float
          from: Math.Vector3.toRecord input
          to: Math.Vector3.fromRecord input

    "src/Units/Compose/N4.elm":
      <<: *UNIFORM-N
      name: N4
      fields: {x: a, y: a, z: a, u: a}
      imports:
        - Math.Vector4
        - Lens exposing (Lens)

      alternatives:
        - name: Vec4
          type: Math.Vector4.Vec4
          dimensionType: Float
          from: Math.Vector4.toRecord input
          to: Math.Vector4.fromRecord input

# Specialized uniform structures (that arent symetric to
# all fields)
- inputs:
    - *UNIFORM_TEMPLATES

  outputs:
    # A lower and a higher bound
    "src/Units/Compose/Range.elm":
      <<: *UNIFORM-N
      name: Range
      axis: Edge
      fields: {min: a, max: a}

      aggregates:

        - postfix: size
          typeParam: number
          type: number
          formula: "max - min"

      concat:
        - postfix: "Scalar"
          typeParam: comparable
          empty: { min: 0, max: 0 }
          using: { min: Basics.min, max: Basics.max }

    # A 2-dimensional range
    "src/Units/Compose/Rect.elm":
      <<: *UNIFORM-N
      name: Rect
      axis: Side
      fields: { left: a, right: a, top: a, bottom: a }

      aggregates:

        - postfix: width
          typeParam: number
          type: number
          formula: "right - left"

        - postfix: height
          typeParam: number
          type: number
          formula: "bottom - top"

        - postfix: size
          typeParam: number
          type: N2 number
          formula: "N2 (right - left) (bottom - top)"

        - postfix: xRange
          typeParam: a
          type: Range a
          formula: "{ min = left, max = right }"

        - postfix: yRange
          typeParam: a
          type: Range a
          formula: "{ min = top, max = bottom }"

      imports:
        - Lens exposing (Lens)
        - Units.Compose.Range as Range exposing (Range)
        - Units.Compose.N2 as N2 exposing (N2)

      concat:
        - postfix: "Scalar"
          typeParam: comparable
          empty: { left: 0, right: 0, top: 0, bottom: 0}
          using: { left: min, right: max, top: min, bottom: max }



- inputs:
    - templates/linear-base.hb.elm
    - templates/uniform-imports.hb.elm
    - templates/linear-type.hb.elm

  outputs:
    "src/Units/Linear/Length.elm":
      name: "Length"
      package: Units.Linear
      normalizesTo: Float
      kinds:
        Zero: { normalize: 0.0, denormalize: 0.0 }
        Meters: { args: [Float], normalize: "v0", denormalize: "input" }
        Millimeters: { args: [Float], normalize: "v0 * 0.001", denormalize: "input * 1000.0" }

        HumanScale:
          args: [Float, Float]
          normalize: "v0 * 1000 + v1 * 0.0001"
          denormalize: ["input / 1000.0", "toFloat (truncate (input * 1000.0))" ]

    "src/Units/Linear/Scale.elm":
      name: "Scale"
      package: Units.Linear
      normalizesTo: Float
      kinds:
        Identity: { normalize: 1.0, denormalize: 1.0 }
        Scalar: { args: [Float], normalize: "v0", denormalize: "input" }
        Percent: { args: [Float], normalize: "v0 / 100.0", denormalize: "input * 100.0" }


